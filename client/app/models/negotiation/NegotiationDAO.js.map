{"version":3,"sources":["../../../src/models/negotiation/NegotiationDAO.js"],"names":["Negotiation","NegotiationDAO","constructor","connection","_connection","_store","add","negotiation","Promise","resolve","reject","request","transaction","objectStore","onsuccess","e","onerror","console","log","target","error","listAll","negotiations","cursor","openCursor","current","result","value","_date","_quantity","_value","push","continue","deleteAll","clear"],"mappings":";;;;;;AAAOA,c;;;AAEQ,SAAMC,cAAN,CAAqB;AACnCC,gBAAYC,UAAZ,EAAwB;AACvB,UAAKC,WAAL,GAAmBD,UAAnB;AACA,UAAKE,MAAL,GAAc,cAAd;AACA;AACDC,QAAIC,WAAJ,EAAiB;AAChB,YAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAMC,UAAU,KAAKP,WAAL,CACdQ,WADc,CACF,CAAC,KAAKP,MAAN,CADE,EACa,WADb,EAEdQ,WAFc,CAEF,KAAKR,MAFH,EAGdC,GAHc,CAGVC,WAHU,CAAhB;;AAKAI,cAAQG,SAAR,GAAqBC,CAAD,IAAON,SAA3B;AACAE,cAAQK,OAAR,GAAmBD,CAAD,IAAO;AACxBE,eAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,cAAO,4BAAP;AACA,OAHD;AAIA,MAXM,CAAP;AAYA;AACDW,cAAU;AACT,YAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAMY,eAAe,EAArB;;AAEA,YAAMC,SAAS,KAAKnB,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGbmB,UAHa,EAAf;;AAKAD,aAAOT,SAAP,GAAoBC,CAAD,IAAO;AACzB,aAAMU,UAAUV,EAAEI,MAAF,CAASO,MAAzB;;AAEA,WAAID,OAAJ,EAAa;AACZ,cAAMlB,cAAc,IAAIP,WAAJ,CACnByB,QAAQE,KAAR,CAAcC,KADK,EAEnBH,QAAQE,KAAR,CAAcE,SAFK,EAGnBJ,QAAQE,KAAR,CAAcG,MAHK,CAApB;AAKAR,qBAAaS,IAAb,CAAkBxB,WAAlB;AACAkB,gBAAQO,QAAR;AACA,QARD,MAQO;AACNvB,gBAAQa,YAAR;AACA;AACD,OAdD;AAeAC,aAAOP,OAAP,GAAkBD,CAAD,IAAO;AACvBE,eAAQC,GAAR,CAAY,YAAYH,EAAEI,MAAF,CAASC,KAAjC;AACAV,cAAO,0BAAP;AACA,OAHD;AAIA,MA3BM,CAAP;AA4BA;;AAEDuB,gBAAY;AACX,YAAO,IAAIzB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAMC,UAAU,KAAKP,WAAL,CACdQ,WADc,CACF,CAAC,KAAKP,MAAN,CADE,EACa,WADb,EAEdQ,WAFc,CAEF,KAAKR,MAFH,EAGd6B,KAHc,EAAhB;AAIAvB,cAAQG,SAAR,GAAqBC,CAAD,IAAON,SAA3B;AACAE,cAAQK,OAAR,GAAmBD,CAAD,IAAO;AACxBE,eAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,cAAO,+BAAP;AACA,OAHD;AAIA,MAVM,CAAP;AAWA;AA9DkC;;sBAAfT,c","file":"NegotiationDAO.js","sourcesContent":["import Negotiation from \"./Negotiation\";\r\n\r\nexport default class NegotiationDAO {\r\n\tconstructor(connection) {\r\n\t\tthis._connection = connection;\r\n\t\tthis._store = \"negotiations\";\r\n\t}\r\n\tadd(negotiation) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst request = this._connection\r\n\t\t\t\t.transaction([this._store], \"readwrite\")\r\n\t\t\t\t.objectStore(this._store)\r\n\t\t\t\t.add(negotiation);\r\n\r\n\t\t\trequest.onsuccess = (e) => resolve();\r\n\t\t\trequest.onerror = (e) => {\r\n\t\t\t\tconsole.log(e.target.error);\r\n\t\t\t\treject(\"Unable to save negotiation\");\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\tlistAll() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst negotiations = [];\r\n\r\n\t\t\tconst cursor = this._connection\r\n\t\t\t\t.transaction([this._store], \"readwrite\")\r\n\t\t\t\t.objectStore(this._store)\r\n\t\t\t\t.openCursor();\r\n\r\n\t\t\tcursor.onsuccess = (e) => {\r\n\t\t\t\tconst current = e.target.result;\r\n\r\n\t\t\t\tif (current) {\r\n\t\t\t\t\tconst negotiation = new Negotiation(\r\n\t\t\t\t\t\tcurrent.value._date,\r\n\t\t\t\t\t\tcurrent.value._quantity,\r\n\t\t\t\t\t\tcurrent.value._value\r\n\t\t\t\t\t);\r\n\t\t\t\t\tnegotiations.push(negotiation);\r\n\t\t\t\t\tcurrent.continue();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve(negotiations);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tcursor.onerror = (e) => {\r\n\t\t\t\tconsole.log(\"Error: \" + e.target.error);\r\n\t\t\t\treject(\"Cannot list negotiations\");\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tdeleteAll() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst request = this._connection\r\n\t\t\t\t.transaction([this._store], \"readwrite\")\r\n\t\t\t\t.objectStore(this._store)\r\n\t\t\t\t.clear();\r\n\t\t\trequest.onsuccess = (e) => resolve();\r\n\t\t\trequest.onerror = (e) => {\r\n\t\t\t\tconsole.log(e.target.error);\r\n\t\t\t\treject(\"Unable to delete negotiations\");\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// // test on console\r\n\r\n// // Save\r\n// ConnectionFactory.getConnection()\r\n// \t.then((conn) => new NegotiationDAO(conn))\r\n// \t.then((dao) => dao.add(negotiation))\r\n// \t.then(() => console.log(\"Successfully saved negotiation!\"))\r\n// \t.catch((err) => console.log(err));\r\n\r\n// // List\r\n// ConnectionFactory.getConnection()\r\n// \t.then((conn) => new NegotiationDAO(conn))\r\n// \t.then((dao) => dao.listAll())\r\n// \t.then((n) => console.log(n))\r\n// \t.catch((err) => console.log(err));\r\n"]}