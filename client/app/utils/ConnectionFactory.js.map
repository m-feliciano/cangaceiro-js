{"version":3,"sources":["../../src/utils/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","forEach","store","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,SAAMA,SAAS,CAAC,cAAD,CAAf;AACA,OAAIC,aAAa,IAAjB;AACA,OAAIC,QAAQ,IAAZ;;AAEA;AACO,SAAMC,iBAAN,CAAwB;AAC9BC,kBAAc;AACb,WAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACA;AACD,WAAOC,aAAP,GAAuB;AACtB,YAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;AAChB,YAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,kBAAYG,eAAZ,GAA+BC,CAAD,IAAO;AACpCd,cAAOe,OAAP,CAAgBC,KAAD,IAAW;AACzBb,0BAAkBc,aAAlB,CAAgCH,EAAEI,MAAF,CAASC,MAAzC;AACA,QAFD;AAGA,OAJD;AAKAT,kBAAYU,SAAZ,GAAyBN,CAAD,IAAO;AAC9B;AACAb,oBAAaa,EAAEI,MAAF,CAASC,MAAtB;AACA;AACAjB,eAAQD,WAAWC,KAAX,CAAiBmB,IAAjB,CAAsBpB,UAAtB,CAAR;;AAEAA,kBAAWC,KAAX,GAAmB,MAAM;AACxB,cAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACA,QAFD;AAGAG,eAAQM,EAAEI,MAAF,CAASC,MAAjB;AACA,OAVD;AAWAT,kBAAYY,OAAZ,GAAuBR,CAAD,IAAO;AAC5BS,eAAQC,GAAR,CAAYV,EAAEI,MAAF,CAASO,KAArB;AACAhB,cAAOK,EAAEI,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,OAHD;AAIA,MAvBM,CAAP;AAwBA;AACD,WAAOT,aAAP,CAAqBhB,UAArB,EAAiC;AAChCD,YAAOe,OAAP,CAAgBC,KAAD,IAAW;AACzB,UAAIf,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCZ,KAArC,CAAJ,EACCf,WAAW4B,iBAAX,CAA6Bb,KAA7B;AACDf,iBAAW6B,iBAAX,CAA6Bd,KAA7B,EAAoC,EAAEe,eAAe,IAAjB,EAApC;AACA,MAJD;AAKA;;AAED;AACA,WAAOC,eAAP,GAAyB;AACxB,SAAI/B,UAAJ,EAAgB;AACfC;AACA;AACD;AA3C6B","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negotiations\"];\r\nlet connection = null;\r\nlet close = null;\r\n\r\n//  factory pattern\r\nexport class ConnectionFactory {\r\n\tconstructor() {\r\n\t\tthrow new Error(\"Cannot instantiate this class\");\r\n\t}\r\n\tstatic getConnection() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (connection) return resolve(connection);\r\n\t\t\tconst openRequest = indexedDB.open(\"cangaceirojs\", 2);\r\n\t\t\topenRequest.onupgradeneeded = (e) => {\r\n\t\t\t\tstores.forEach((store) => {\r\n\t\t\t\t\tConnectionFactory._createStores(e.target.result);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\topenRequest.onsuccess = (e) => {\r\n\t\t\t\t// only will be executed once, on the first connection\r\n\t\t\t\tconnection = e.target.result;\r\n\t\t\t\t// Waiting the original function!\r\n\t\t\t\tclose = connection.close.bind(connection);\r\n\r\n\t\t\t\tconnection.close = () => {\r\n\t\t\t\t\tthrow new Error(\"You cannot close the connection directly\");\r\n\t\t\t\t};\r\n\t\t\t\tresolve(e.target.result);\r\n\t\t\t};\r\n\t\t\topenRequest.onerror = (e) => {\r\n\t\t\t\tconsole.log(e.target.error);\r\n\t\t\t\treject(e.target.error.name);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\tstatic _createStores(connection) {\r\n\t\tstores.forEach((store) => {\r\n\t\t\tif (connection.objectStoreNames.contains(store))\r\n\t\t\t\tconnection.deleteObjectStore(store);\r\n\t\t\tconnection.createObjectStore(store, { autoIncrement: true });\r\n\t\t});\r\n\t}\r\n\r\n\t// monkey patch: changing the main API\r\n\tstatic closeConnection() {\r\n\t\tif (connection) {\r\n\t\t\tclose();\r\n\t\t}\r\n\t}\r\n}\r\n"]}